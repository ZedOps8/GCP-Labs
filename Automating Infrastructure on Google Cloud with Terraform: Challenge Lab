GCP 345 : Automating Infrastructure on Google Cloud with Terraform: Challenge Lab

Run the below commands in cloud shell without any changes.

touch main.tf
touch variables.tf
mkdir -p modules/instances
touch modules/instances/instances.tf
touch modules/instances/outputs.tf
touch modules/instances/variables.tf
mkdir -p modules/storage
touch modules/storage/storage.tf
touch modules/storage/outputs.tf
touch modules/storage/variables.tf

Now please open editor page under new window
Add the following to the each variables.tf file which you see under Storage, Instances, Modules, and fill in the GCP Project ID, Region, Zone as specified under the lab page:

variable "region" {
default = "Region mentioned under Task 1"
}
variable "zone" {
default = "Zone mentioned under Task 1"
}
variable "project_id" {
default = "<FILL IN PROJECT ID>"
}

3. Add the following to the main.tf file:

terraform {
required_providers {
google = {
source = "hashicorp/google"
version = "4.47.0"
}
}
}
provider "google" {
project = var.project_id
region = var.region
zone = var.zone
}
module "instances" {
source = "./modules/instances"
}

4. Run the below command under Cloud Shell in the root directory to initialize terraform.

terraform init

TASK 2:

1.Navigate to Compute Engine > VM Instances. Click on tf-instance-1. Copy the Instance ID down somewhere to use later.

2. Navigate to Compute Engine > VM Instances. Click on tf-instance-2. Copy the Instance
ID down somewhere to use later.

3. Next, navigate to modules/instances/instances.tf. Copy the following configuration into
the file:

resource "google_compute_instance" "tf-instance-1" {
name = "tf-instance-1"
machine_type = "n1-standard-1"
zone = var.zone
metadata_startup_script = <<-EOT
#!/bin/bash
EOT
allow_stopping_for_update = true
boot_disk {
initialize_params {
image = "debian-cloud/debian-10"
}
}
network_interface {
network = "default"
}
}
resource "google_compute_instance" "tf-instance-2" {
name = "tf-instance-2"
machine_type = "n1-standard-1"
zone = var.zone
metadata_startup_script = <<-EOT
#!/bin/bash
EOT
allow_stopping_for_update = true
boot_disk {
initialize_params {
image = "debian-cloud/debian-10"
}
}
network_interface {
network = "default"
}
}
4. To import the first instance, use the following command, using the Instance ID for
tf-instance-1 you copied down earlier. Edit the command under any blank space and then paste it under cloudshell

terraform import module.instances.google_compute_instance.tf-instance-1 <INSTANCE-ID>

5. To import the second instance, use the following command, using the Instance ID for
tf-instance-2 you copied down earlier. Edit the command under any blank space and then paste it under cloudshell

terraform import module.instances.google_compute_instance.tf-instance-2 <INSTANCE-ID-2>

6. The two instances have now been imported into your terraform configuration. You can
now optionally run the commands to update the state of Terraform. Type yes at the
dialogue after you run the apply command to accept the state changes.

terraform plan
terraform apply

Verify the task
